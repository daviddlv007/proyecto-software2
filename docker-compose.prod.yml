# ============================================
# DOCKER COMPOSE - PRODUCCIÓN
# Vite Preview + PostgreSQL (2025 - Moderno y Eficiente)
# ============================================

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  ml-models:
  dl-models:
  dl-uploads:

services:

  # ==========================================
  # FRONTEND - Vite Preview Server (Producción)
  # Más moderno y eficiente que nginx para SPAs
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-prod
    restart: unless-stopped
    depends_on:
      - core-service
      - ml-service
      - dl-service
    environment:
      VITE_CORE_API_URL: ${CORE_API_URL:-http://localhost:8080/graphql}
      VITE_ML_API_URL: ${ML_API_URL:-http://localhost:8081}
      VITE_DL_API_URL: ${DL_API_URL:-http://localhost:8082}
    networks:
      - app-network
    ports:
      - "${FRONTEND_PORT:-4173}:4173"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4173"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  # ==========================================
  # CORE SERVICE - Spring Boot + PostgreSQL
  # ==========================================
  core-service:
    build:
      context: ./core-service
      dockerfile: Dockerfile
    container_name: core-service-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/coredb
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-core_user}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-core_password}
      SPRING_DATASOURCE_DRIVER: org.postgresql.Driver
      HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SERVER_PORT: 8080
      JAVA_OPTS: "-Xms128m -Xmx512m -XX:+UseG1GC"
    networks:
      - app-network
    ports:
      - "${CORE_PORT:-8080}:8080"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================
  # ML SERVICE - FastAPI + PostgreSQL
  # ==========================================
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: ml-service-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      core-service:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-ml_user}:${POSTGRES_PASSWORD:-ml_password}@postgres:5432/mldb
      CORE_SERVICE_URL: http://core-service:8080/graphql
      PORT: 8081
      WORKERS: 2
      PYTHONUNBUFFERED: "1"
    volumes:
      - ml-models:/app/models
    networks:
      - app-network
    ports:
      - "${ML_PORT:-8081}:8081"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8081/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ==========================================
  # DL SERVICE - Node.js + PostgreSQL
  # ==========================================
  dl-service:
    build:
      context: ./dl-service
      dockerfile: Dockerfile
    container_name: dl-service-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      core-service:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-dl_user}:${POSTGRES_PASSWORD:-dl_password}@postgres:5432/dldb
      CORE_SERVICE_URL: http://core-service:8080/graphql
      PORT: 8082
      NODE_ENV: production
      NODE_OPTIONS: "--max-old-space-size=512"
    volumes:
      - dl-models:/app/models
      - dl-uploads:/app/uploads
    networks:
      - app-network
    ports:
      - "${DL_PORT:-8082}:8082"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s

  # ==========================================
  # POSTGRESQL - Base de datos principal
  # ==========================================
  postgres:
    image: postgres:16-alpine
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-maindb}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Scripts de inicialización si existen
      - ./database:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-maindb}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s